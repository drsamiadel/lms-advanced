generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Models and related sessions, accounts, etc.

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  SUPPORT
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role[]             @default([STUDENT])
  accounts          Account[]
  sessions          Session[]
  courses           Course[]
  userInfo          UserInfo?
  wishlist          Wishlist[]
  MentorshipRequest MentorshipRequest?

  @@map("users")
}

model UserInfo {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String?   @db.String
  birthdate DateTime?
  country   String?   @db.String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId])
  @@map("userinfos")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Course Models and related chapters, attachments, etc.

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String   @db.String
  description String?  @db.String
  imageUrl    String?  @db.String
  price       Float?
  isPublished Boolean? @default(false)

  chapters Chapter[]

  purchases Purchase[]

  wishlistCourse WishlistCourse[]

  rating        RatingCourse[]

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@fulltext([title])
  @@map("courses")
}

model Chapter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @db.String
  description String?  @db.String
  position    Int
  isPublished Boolean? @default(false)
  isFree      Boolean? @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @db.String
  description String?  @db.String
  videoUrl    String?  @db.String
  position    Int
  isPublished Boolean? @default(false)

  quizzes     Quiz?
  attachments Attachment[]

  userProgress UserProgress[]

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Quiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  questions Question[]

  lessonId String @unique @db.ObjectId
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  question    String  @db.String
  options     String  @db.String
  answer      String  @db.String
  explanation String? @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAnswers UserAnswer[]

  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model UserAnswer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer String @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, questionId])
  @@map("useranswers")
}

model UserProgress {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  lessonId String @db.ObjectId
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
  @@map("userprogress")
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique @db.String
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @db.String
  url  String @db.String

  lessonId String @db.ObjectId
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
  @@map("attachments")
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("purchases")
}

// Stripe Models

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique @db.ObjectId
  stripeCustomerId String @unique @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stripecustomers")
}

// Rating Models

model RatingCourse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?  @db.ObjectId

  @@unique([userId])
  @@map("ratingcourses")
}

// Wishlist Models

model Wishlist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  courses WishlistCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@map("wishlists")
}

model WishlistCourse {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String @db.ObjectId
  wishlistId String @db.ObjectId

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, wishlistId])
  @@map("wishlistcourses")
}

// Notification Models

  // yarab ta2a mn 3ndk xD

// Support Models

model Ticket {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  title         String        @db.String
  message       String        @db.String
  Ticketreplies TicketReply[]
  status        String        @default("open") @db.String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("tickets")
}

model TicketReply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId  String   @db.ObjectId
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  userId    String   @db.ObjectId
  message   String   @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ticketreplies")
}

// Mentorship Models

model MentorshipRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminId   String?  @db.ObjectId
  message   String?  @db.String
  status    String   @default("pending") @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, adminId])
  @@map("mentorshiprequests")
}
